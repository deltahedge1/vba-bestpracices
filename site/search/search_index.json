{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"VBA Best Practices Description list of best practices and tips when developing VBA VBA Project Set-up Each VBA project should include Config Module Main Module Utils Module (optional) 1. Config Module This module stores meta data of the vba project Inside Config Module Note we use CAPITALS for all values as they are constants What Config module looks like 'inside the config module Public Const VERSION = \"<version>\" Public Const NAME = \"<name>\" Public Const EMAIL = \"<email>\" Public Const DESCRIPTION = \"<example>\" Public Const REPO = \"<repo url>\" Public Const REPO ADO_FEATURE_NUMBER = \"<ADO_number>\" 'feel free to add other meta data you require Example Config Module 'inside the config module Public Const VERSION = \"0.1.0\" Public Const NAME = \"Ish Hassan\" Public Const EMAIL = \"ihassan@example.com\" Public Const DESCRIPTION = \"export and import VBA code for git versioning\" Public Const REPO = \"https://github.com/deltahedge1/vba-bestpracices\" Public Const Repo ADO_FEATURE_NUMBER = \"<ADO_number>\" 2. Main Module In the main module you should have a main subroutine which this logic for the whole solution. What is the Main module Understanding the main module is best illustrated through an example. Say you had a solution to import and transform some data from another workbook. The steps would be: select sheet to get data from run validations on data raise exceptions if any if no exceptions copy the data transform the data (e.g. fill blanks) Example Main Module Public Sub Main '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''' 'Get data from another sheet and transform it by replacing blanks ' ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''' 'subroutines below would be in there own modules call utils.get_data call utils.validate_data call utils.copy_data_to_sheet call utils.transform_data End Sub Each step above could be modularised into its own subroutines in another module like utils but would be combined in main as they all together create the solution. Why do we modularise code into main and other modules We modularise the code for two reasons. More maintainable if your re-using a function and there is an error if you abstracted using a function you would only need to change it once in that that function . Easier to preform unit tests if all you code is in one long subroutine you would struggle to find which part of the code the error was in, and to test it you would need to run everything before it. 3. Utils Module (optional) This is the module where you can modularise subroutines and functions which will be used in main module Feel free to add more modules that just Utils if it helps manage your code better Understanding the Utils Module Typically you can put subroutines or functions that need to be used mutiple times. This could be like find the last row in a column or check it a column contains blanks. These can then we re-used mutiple time through out the project, and if there is a bug you only need to fix it in one place. Example Utils module 'inside utils module Sub copy_range_to_another_sheet(from_sheet as worksheet, to_sheet as worksheet) ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''' 'Copies data from one worksheet to another worksheet ' 'ARGS: ' from_sheet (worksheet obj): sheet to copy from ' to_sheet (worksheet obj): sheet to copy to ' 'EXAMPLE: ' call copy_range_to_another_sheet activeworkbook.sheets(\"sheet1\") _ ' activeworkbook.sheets(\"sheet2\") ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''' from_sheet(\"Sheet1\").Range(\"A1:B10\").Copy Destination:=to_sheet(\"Sheet2\").Range(\"E1\") End Sub Why do we modularise code into Utils We modularise the code for two reasons, same reasons we did it for Main module above (are you suprised!) More maintainable if your re-using a function and there is an error if you abstracted using a function you would only need to change it once in that that function . Easier to preform unit tests if all you code is in one long subroutine you would struggle to find which part of the code the error was in, and to test it you would need to run everything before it. Moving your VBA code to Production reference Documentation Versioning Testing and Testing documentation use git to version control Change Log README.md 1. Documentation There are two types of documentation required for code 1. Internal documentation This documentation lives inside the code and is meant to explain to developers what the code is intended for. It includes the following: description arguments and arugments types exceptions raised returns examples references Subroutine Function Sub anonomyse_email(ByRef check_range As Range, _ Optional ByVal match_str As Variant = \"@\", _ Optional ByVal replace_value As Variant = \"abc@gmail.com\") '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''' 'Find emails in the range and then anonymse them with another email ' 'ARGS: ' check_range (obj:Range): the range to check for emails ' Optional match_str (String): string to match against to check if value is an email ' Optional replace_value (String): replace the email with this string ' 'EXAMPLES: ' call with defaults: ' call anonomyse_email(activesheet.usedrange) ' ' change anonomysed email: ' call anonomyse_email(activesheet.usedrange, \"@\", \"hello@gmail.com\") 'change the anonmysed ' ' replace only the gmails with another mail ' call anonomyse_email(activesheet.usedrange, \"@gmail\", \"hello@yahoo.com\") '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''' Dim cell As Range For Each cell In check_range If InStr(cell.Value2, match_str) > 0 Then cell.Value2 = replace_value End If Next cell End Sub Function add_2(byval num1 as long, byval num2 as long) as long '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''' 'adds to numbers together ' 'ARGS: ' num1 (long): number 1 to add ' num2 (long): number 1 to add ' 'RETURNS: ' long: the total of the two numbers ' 'EXAMPLE: ' add_2(1, 3) => 4 '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''' add_2 = num1 + num2 End Function 2. External documentation This documentation lives outside the code and can go into much more depth than internal documentation. This documentation usually includes areas suchas : How to install Limitations Quick start guides 2. Versioning Your code should contain at a minimum versioning in the Config Module . Reccomend to use the semantic versioning system. 3. Testing and Testing Documentation Your code should include unit tests, integration tests, and testing documentation. Considerations Testing as many inputs and expected outputs for your subroutines and functions Testing any expected exceptions e.g. exception handlers Testing the combination of subroutines and functions integrating together Thinking about the edge cases (as developers its upto to design solutions for the edge cases) Take a risk based approach what is the most probable what could go wrongs and focus on them but also sprinkle some edge cases in there and depending on if the edge case can have serious consoquences testing them vigirously Try to cover as many cases, and combinations as possible and not to over test Testing is hard but neccesiary you will need to use your professional judgement If your testing is not documented then it is not done Using a test matrix which shows scope on the columns and test cases on the rows is my recomendation 4. Use git for version control Export your code to normal txt files so you can version control them with git. I know if it annoying but it helps when we collaborate and if we need to roll back to previous versions. 5. Change Log Create a CHANGELOG.md or HISTORY.md in the root directory with version date change in the release This will help you so much in the future, you can thank me then. Unless you forgot in which case you will hate yourself! Example CHANGELOG.md # Release History ## dev small changes to the validation ## 2.28.1 (2022-06-29) Improvements Speed optimization in `iter_content` with transition to `yield from` . (#6170) Dependencies Added support for chardet 5.0.0 (#6179) Added support for charset-normalizer 2.1.0 (#6169) 6. README.md create a nice REAMDE.MD in the root directory of your project. Include some highlevel material only. Details should be in the documentation Best Practices Option Explicit Full declare variables Naming convention Code commenting Turning off ScreenUpdating and Automatic calculation Explicitly call the default property of an object Error Handling Code Readability Use \"\" instead of vbNullString Structure modular code (abstraction) 1. Option Explicit 2. Full declare variables 3. Naming convention 4. Code commenting 5. Turning off ScreenUpdating and Automatic calculation 6. Explicitly call the default property of an object 7. Error Handling 8. Code Readability 9. Use \"\" instead of vbNullString 4. Structure modular code (abstraction)","title":"homepage"},{"location":"#vba-best-practices","text":"","title":"VBA Best Practices"},{"location":"#description","text":"list of best practices and tips when developing VBA","title":"Description"},{"location":"#vba-project-set-up","text":"Each VBA project should include Config Module Main Module Utils Module (optional)","title":"VBA Project Set-up"},{"location":"#1-config-module","text":"This module stores meta data of the vba project Inside Config Module Note we use CAPITALS for all values as they are constants What Config module looks like 'inside the config module Public Const VERSION = \"<version>\" Public Const NAME = \"<name>\" Public Const EMAIL = \"<email>\" Public Const DESCRIPTION = \"<example>\" Public Const REPO = \"<repo url>\" Public Const REPO ADO_FEATURE_NUMBER = \"<ADO_number>\" 'feel free to add other meta data you require Example Config Module 'inside the config module Public Const VERSION = \"0.1.0\" Public Const NAME = \"Ish Hassan\" Public Const EMAIL = \"ihassan@example.com\" Public Const DESCRIPTION = \"export and import VBA code for git versioning\" Public Const REPO = \"https://github.com/deltahedge1/vba-bestpracices\" Public Const Repo ADO_FEATURE_NUMBER = \"<ADO_number>\"","title":"1. Config Module"},{"location":"#2-main-module","text":"In the main module you should have a main subroutine which this logic for the whole solution. What is the Main module Understanding the main module is best illustrated through an example. Say you had a solution to import and transform some data from another workbook. The steps would be: select sheet to get data from run validations on data raise exceptions if any if no exceptions copy the data transform the data (e.g. fill blanks) Example Main Module Public Sub Main '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''' 'Get data from another sheet and transform it by replacing blanks ' ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''' 'subroutines below would be in there own modules call utils.get_data call utils.validate_data call utils.copy_data_to_sheet call utils.transform_data End Sub Each step above could be modularised into its own subroutines in another module like utils but would be combined in main as they all together create the solution. Why do we modularise code into main and other modules We modularise the code for two reasons. More maintainable if your re-using a function and there is an error if you abstracted using a function you would only need to change it once in that that function . Easier to preform unit tests if all you code is in one long subroutine you would struggle to find which part of the code the error was in, and to test it you would need to run everything before it.","title":"2. Main Module"},{"location":"#3-utils-module-optional","text":"This is the module where you can modularise subroutines and functions which will be used in main module Feel free to add more modules that just Utils if it helps manage your code better Understanding the Utils Module Typically you can put subroutines or functions that need to be used mutiple times. This could be like find the last row in a column or check it a column contains blanks. These can then we re-used mutiple time through out the project, and if there is a bug you only need to fix it in one place. Example Utils module 'inside utils module Sub copy_range_to_another_sheet(from_sheet as worksheet, to_sheet as worksheet) ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''' 'Copies data from one worksheet to another worksheet ' 'ARGS: ' from_sheet (worksheet obj): sheet to copy from ' to_sheet (worksheet obj): sheet to copy to ' 'EXAMPLE: ' call copy_range_to_another_sheet activeworkbook.sheets(\"sheet1\") _ ' activeworkbook.sheets(\"sheet2\") ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''' from_sheet(\"Sheet1\").Range(\"A1:B10\").Copy Destination:=to_sheet(\"Sheet2\").Range(\"E1\") End Sub Why do we modularise code into Utils We modularise the code for two reasons, same reasons we did it for Main module above (are you suprised!) More maintainable if your re-using a function and there is an error if you abstracted using a function you would only need to change it once in that that function . Easier to preform unit tests if all you code is in one long subroutine you would struggle to find which part of the code the error was in, and to test it you would need to run everything before it.","title":"3. Utils Module (optional)"},{"location":"#moving-your-vba-code-to-production","text":"reference Documentation Versioning Testing and Testing documentation use git to version control Change Log README.md","title":"Moving your VBA code to Production"},{"location":"#1-documentation","text":"There are two types of documentation required for code 1. Internal documentation This documentation lives inside the code and is meant to explain to developers what the code is intended for. It includes the following: description arguments and arugments types exceptions raised returns examples references Subroutine Function Sub anonomyse_email(ByRef check_range As Range, _ Optional ByVal match_str As Variant = \"@\", _ Optional ByVal replace_value As Variant = \"abc@gmail.com\") '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''' 'Find emails in the range and then anonymse them with another email ' 'ARGS: ' check_range (obj:Range): the range to check for emails ' Optional match_str (String): string to match against to check if value is an email ' Optional replace_value (String): replace the email with this string ' 'EXAMPLES: ' call with defaults: ' call anonomyse_email(activesheet.usedrange) ' ' change anonomysed email: ' call anonomyse_email(activesheet.usedrange, \"@\", \"hello@gmail.com\") 'change the anonmysed ' ' replace only the gmails with another mail ' call anonomyse_email(activesheet.usedrange, \"@gmail\", \"hello@yahoo.com\") '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''' Dim cell As Range For Each cell In check_range If InStr(cell.Value2, match_str) > 0 Then cell.Value2 = replace_value End If Next cell End Sub Function add_2(byval num1 as long, byval num2 as long) as long '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''' 'adds to numbers together ' 'ARGS: ' num1 (long): number 1 to add ' num2 (long): number 1 to add ' 'RETURNS: ' long: the total of the two numbers ' 'EXAMPLE: ' add_2(1, 3) => 4 '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''' add_2 = num1 + num2 End Function 2. External documentation This documentation lives outside the code and can go into much more depth than internal documentation. This documentation usually includes areas suchas : How to install Limitations Quick start guides","title":"1. Documentation"},{"location":"#2-versioning","text":"Your code should contain at a minimum versioning in the Config Module . Reccomend to use the semantic versioning system.","title":"2. Versioning"},{"location":"#3-testing-and-testing-documentation","text":"Your code should include unit tests, integration tests, and testing documentation. Considerations Testing as many inputs and expected outputs for your subroutines and functions Testing any expected exceptions e.g. exception handlers Testing the combination of subroutines and functions integrating together Thinking about the edge cases (as developers its upto to design solutions for the edge cases) Take a risk based approach what is the most probable what could go wrongs and focus on them but also sprinkle some edge cases in there and depending on if the edge case can have serious consoquences testing them vigirously Try to cover as many cases, and combinations as possible and not to over test Testing is hard but neccesiary you will need to use your professional judgement If your testing is not documented then it is not done Using a test matrix which shows scope on the columns and test cases on the rows is my recomendation","title":"3. Testing and Testing Documentation"},{"location":"#4-use-git-for-version-control","text":"Export your code to normal txt files so you can version control them with git. I know if it annoying but it helps when we collaborate and if we need to roll back to previous versions.","title":"4. Use git for version control"},{"location":"#5-change-log","text":"Create a CHANGELOG.md or HISTORY.md in the root directory with version date change in the release This will help you so much in the future, you can thank me then. Unless you forgot in which case you will hate yourself! Example CHANGELOG.md # Release History ## dev small changes to the validation ## 2.28.1 (2022-06-29) Improvements Speed optimization in `iter_content` with transition to `yield from` . (#6170) Dependencies Added support for chardet 5.0.0 (#6179) Added support for charset-normalizer 2.1.0 (#6169)","title":"5. Change Log"},{"location":"#6-readmemd","text":"create a nice REAMDE.MD in the root directory of your project. Include some highlevel material only. Details should be in the documentation","title":"6. README.md"},{"location":"#best-practices","text":"Option Explicit Full declare variables Naming convention Code commenting Turning off ScreenUpdating and Automatic calculation Explicitly call the default property of an object Error Handling Code Readability Use \"\" instead of vbNullString Structure modular code (abstraction)","title":"Best Practices"},{"location":"#1-option-explicit","text":"","title":"1. Option Explicit"},{"location":"#2-full-declare-variables","text":"","title":"2. Full declare variables"},{"location":"#3-naming-convention","text":"","title":"3. Naming convention"},{"location":"#4-code-commenting","text":"","title":"4. Code commenting"},{"location":"#5-turning-off-screenupdating-and-automatic-calculation","text":"","title":"5. Turning off ScreenUpdating and Automatic calculation"},{"location":"#6-explicitly-call-the-default-property-of-an-object","text":"","title":"6. Explicitly call the default property of an object"},{"location":"#7-error-handling","text":"","title":"7. Error Handling"},{"location":"#8-code-readability","text":"","title":"8. Code Readability"},{"location":"#9-use-instead-of-vbnullstring","text":"","title":"9. Use \"\" instead of vbNullString"},{"location":"#4-structure-modular-code-abstraction","text":"","title":"4. Structure modular code (abstraction)"},{"location":"about1/","text":"About section 1","title":"About section 1"},{"location":"about1/#about-section-1","text":"","title":"About section 1"},{"location":"about2/","text":"About section 2","title":"About section 2"},{"location":"about2/#about-section-2","text":"","title":"About section 2"}]}